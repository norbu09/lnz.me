<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



  

<title type="text">Lenz Gschwendtner</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://lnz.me/feed.xml" />
<link rel="alternate" type="text/html" href="http://lnz.me/" />
<updated>2015-10-12T14:11:53+13:00</updated>
<id>http://lnz.me/</id>
<author>
  <name>Lenz Gschwendtner</name>
  <uri>http://lnz.me/</uri>
  <email>mail@norbu09.org</email>
</author>


<entry>
  <title type="html"><![CDATA[Lego for grownups]]></title>
  <link rel="alternate" type="text/html" href="http://lnz.me/lego-for-grownups/"/>
  <id>http://lnz.me/lego-for-grownups</id>
  <updated>2015-10-12 13:26:43 +1300</updated>
  <published>2015-10-12T00:00:00+13:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#iwantmyname" term="iwantmyname" />
  <content type="html">
  
    &lt;p&gt;When I think about building software I try to see where we need to end
up in order to help the customer right now and then work backwards from
there. Because I am really bad at knowing what customers want I mock up
something that is good enough to get feedback and then morph it into
working code and then robust infrastructure. At iwantmyname I have
pushed for this since we started and for the most part we succeeded till
we tried to grow up and “clean up” and “do things properly”. The result
was the complete loss of the playfulness of our stack and a return to
“work” instead of experimentation. We are currently fixing this and it
is mainly a mindset thing.&lt;/p&gt;

&lt;p&gt;We had an internal security audit recently and one of the outcomes
was that our architecture is slightly ahead of its time, we do
micro-services for at least 6 years by now and learned a lot about them.
In this post I’ll talk a bit about how to go from mock code to robust
infrastructure.&lt;/p&gt;

&lt;p&gt;When a customer or we have an idea about a feature or a request or we
see a lot of support in a specific area we want to invest a bit of time
to implement an initial assumption about how we could address this. If
it is easy to implement this and if it is simple to deploy this change
then everyone in the team will be happy to make these little changes and
over time we create a relevant product. Creating an environment where
these changes have a low barrier is key in my view. It fosters ownership
of the product across all parts of the company and helps create relevant
products.&lt;/p&gt;

&lt;p&gt;If adding a feature involves writing a project request, a few meetings,
deployment windows, various iterations of accept/review/sign off cycles,
then any experiment becomes a costly thing and that has two big
drawbacks. First, it is not fun to experiment and therefor less
experiments will happen. This means less and less features or
improvements will hit the site over time. The second issue is the time
and money sunk in an early assumption, This first draft is most
likely not what your customers actually wanted but with all that
investment it will most probably be the way they have to use that
feature. Any change would need to go through the same cycle of project
management and other things will always be more urgent.&lt;/p&gt;

&lt;p&gt;How is it possible to go from a simple idea and mockup to working
code that is scalable without much pain and without compromising
security or reliability for the rest of the system. For us the answer
was in a service oriented architecture or micro services or whatever the
current buzz word for it is. We write every functionality on the site as a
RabbitMQ endpoint that has a little daemon listing on it that implements
that feature. To get a new feature out the door, we write a crude first
version of what we think the functionality should be, mock up a bit of UI
that interacts with that daemon and see how our customers like it. Over
time that first crude prototype will morph into a nicer bit of code that
is maintainable but because all bits of code are loosely coupled and the
interfaces are just JSON messages via AMQP the internals of any daemon
are not that important. The code quality can evolve over time and any
bit can be replaced with new code even in new languages by just
maintaining the external JSON interface. Also, and that is important,
buggy code is limited to that daemon, no impact on the rest of the
system. Mocking up an idea in code has no operational impact on the rest
of the system and that makes it save to play.&lt;/p&gt;

&lt;p&gt;This way, moving from an idea to a scalable and reliable part of the
system is an easy progression, time and money is spent on the parts that
need to be reliable and are actually used, the bits that are nice to
haves get re-writes less often. Code evolves as part of the system. The
system evolves as user behaviour changes over time. The system becomes
an adaptable organism, code is killed off like old cells, new code is
introduced as new experiments are done. It is a living thing, not a
painstakingly architected, implemented and finally handed over to ops
kind a system. We still have an architecture that we adhere to but it is
as reduced as JSON via AMQP and two sorts of data stores. The rest is
morphing over time and will change as our customers change.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/lego-for-grownups/&quot;&gt;Lego for grownups&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on October 12, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The developers dilemma]]></title>
  <link rel="alternate" type="text/html" href="http://lnz.me/the-developers-dilemma/"/>
  <id>http://lnz.me/the-developers-dilemma</id>
  <updated>2015-07-07 12:27:46 +1200</updated>
  <published>2015-07-07T00:00:00+12:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#dev" term="dev" />
  <content type="html">
  
    &lt;p&gt;Writing software is an interesting process. It transforms abstract
concepts, feature requests, vague ideas into something people can
interact with. It is a modern way of making ideas real, tangible,
visible and hopefully usable. This process is a strange mixture of
operating within tight constraints and at the same time being highly
creative.&lt;/p&gt;

&lt;p&gt;Developers come in many flavours, just like traditional crafts men, they
may have studied for many years or just picked up an editor and started
mucking around in someone else’s code till they felt comfortable enough
to write their own code. As with any trade, developers are often very
proud of what they produce, very opinionated about the one right way of
doing things and often very much in love with the nitty gritty details
of the implementation and the technology they use to get the desired
result. &lt;/p&gt;

&lt;p&gt;People using the artefacts developers produce normally only see a more
or less working product that they can interact with. They never ever see
any of the implementation details and will never find kind words for all
the work that went into building the product. They, most likely, only
give you annoyed feedback about the bugs they find.&lt;/p&gt;

&lt;p&gt;The other big measure for someone using software is also how fast a new
feature will be available, how fast a bug they found will be fixed and
how soon the product will look nicer or be more usable than it is right
now. In other words all they care is a working product, no appreciation
what so ever for the time and effort that went into writing all that
beautiful code.&lt;/p&gt;

&lt;p&gt;Over time every project develops into a large pile of well meant
approaches and quick feature hacks to make customers happy and still
retain a somewhat maintainable code base. Over time, often the team
working on the project changes, gets bigger, new ideas and concepts get
introduced. This is normally the moment where a bigger rewrite or
cleanup of the code base is needed and the client (boss, paying
customer or more general the user) will not understand why the next new
feature takes so much longer than it used to. Even more important, you
start spending money on things no one ever pays something for, you start
spending money on technical dept without any way of recovering those
costs.&lt;/p&gt;

&lt;p&gt;The developers dilemma is the balance of speed of development and
accumulation of technical dept. The balance of quickly pushing out
something that will pay for the time spent on developing that very feature
and taking enough time to do it in a way that future developers have a
chance to maintain that feature without the immediate desire the rewrite
it and therefor killing the profit you can make with that feature.&lt;/p&gt;

&lt;h2 id=&quot;a-normal-product-life-cycle&quot;&gt;A normal product life cycle&lt;/h2&gt;

&lt;p&gt;If I look back at many of the products I developed or overlooked
development of than I can see a pattern that emerged independent of the
developers, management approach and industry they were in. A project
starts out well planned, with all the best of intentions. After a while
things take way longer than planned and stuff needs to happen right now,
somehow. Projects that never entered that phase dragged on forever and
never went into production. The ones that entered that phase had to make
compromises.&lt;/p&gt;

&lt;p&gt;On the projects that never entered production I can also see a desire of
mostly developers with a strong academic background to design a piece of
software that ticks all the boxes of a certain way of doing things.
Design patterns, Test driven development, a special framework pick any
“this is the right way of doing it” approach and you will often find
projects that never see the light of day but cost lots of money. I would
even go that far as to say that a very opinionated developer that never
had to ship a project him or herself to make a living, someone who
always worked in companies that payed them a regular salary and never
had to actually listen to costomer feedback, are a high risk to the
completion of any project and need a lot of mentoring along the way.&lt;/p&gt;

&lt;p&gt;On the projects that shipped I can see that the compromises made the
developers unhappy but at least there was a product that started pay off
the costs for the development of that project. Those projects are often
in production for a long time and get refactored all the time but
ultimately reach a point where “the big new system” needs to be written. &lt;/p&gt;

&lt;p&gt;I have seen “big new systems” developed, the big new system that fixes
everything and makes the whole mess a really nice to develop platform
that “just works”. I’ve sunk a lot of money on those projects in my
lifetime and not a single one of those new systems ever saw the light of
day. Even more impressive is that these shiny new systems often get
rewritten a few times completely even before they go into production
because there is a newer even better and nicer way of doing things and
everyone wants to start using that. Add different skill levels and
willingness to learn new things to the mix and you will easily see why
those projects often fail. The one sentence that you should always watch
out for is “while we don’t have this in production we might as well do
it properly and use …”. This very sentence cost me years of dev time
in the past, watch out for it and challenge it wherever you can.&lt;/p&gt;

&lt;h2 id=&quot;developers-are-in-love-with-their-craft&quot;&gt;Developers are in love with their craft&lt;/h2&gt;

&lt;p&gt;A boat builder that is really good at building beautiful wooden boats
will have many admirers that will look at the boats and see how nice
they are built. If you ask that boat builder to build a camper he will
most probably try to find a way how he can build a beautiful wooden land
yacht that is stunning to look at and roughly in the price class of a
wooden boat. This will most probably be a stunning piece of engineering
and a real head turner for people who can appreciate the craftsmanship.
If, however, you tried to launch a production line of budget campers to
rent out to ignorant tourists that just want to race in a hurry from A
to B and tick the most prominent sights on the way before they hop on a
plane and head home again, then you just wasted an awful lot of money
on something that is totally over-engineered for the purpose.&lt;/p&gt;

&lt;p&gt;With developing software it is not as obvious but it definitely goes
into the same direction. More often than not a trivial problem can be
built in a way that ties up man power for months to do it properly.
Unfortunately, especially in early stage startups, no one even knows if
that feature will be used, how it will be used, if this is the right way
of doing it and so on. Spending a lot of time just to throw that piece
of software away later looks like a wasteful way of doing things but
it is the normal way most developers operate. If problem X comes along
then solution Y is the right way of doing it. We want to deliver nice
code, something that is robust, something that can scale, something that
has a defined scope and we can test that the software we deliver
operates within those constraints.&lt;/p&gt;

&lt;p&gt;Two months down the track you have to accept the fact that the
parameters you thought you operate in are not how your users use the
feature. They found it really useful to do Y with it and never even use
it for X. This means now that you have to rewrite your test suite, fix
your code, make sure it still scales for the new problem and then deploy
the new code … only to find out that a few weeks later the scope
changed yet again.&lt;/p&gt;

&lt;p&gt;Early stage startups and new features that have not been tested on a
large audience are often the most obvious place where time wasted in too
much engineering can be found. A new feature is something no one knows
how (or if) it will be used. In my experience pushing out an early
prototype that does a subset of what the final feature should be capable
of, kind of a minimal viable feature, and then refining it over time
till it is nice and does what your customers expect is in the end a way
cheaper mode of developing than a full spec and months of dev time early
on.&lt;/p&gt;

&lt;p&gt;The challenge is that developers more often than not will not buy into
this concept and this needs a lot of convincing and a very robust
infrastructure to roll out changes and roll back changes in production
very easy. If developers get comfortable deploying code into production
and trying things out, quick and dirty, then they will start pushing out
quick experiments to test if a feature could work. This makes your
product so much faster and visibly moving forward for your customers.&lt;/p&gt;

&lt;h2 id=&quot;saying-sorry-to-a-client&quot;&gt;Saying sorry to a client&lt;/h2&gt;

&lt;p&gt;I have seen very upset clients that used an early feature that was buggy
and stuff that went horribly wrong. They were angry for a reason, buggy
code in the wild is always a bad thing. However, with that feedback and
a fast deployment mechanism the developers can fix that one problem
really quick and get back to the client, apologise and tell them that
the problem is already fixed. I have seen this happening in under half
an hour after complaint and saw very happy customers that were just
stunned by the fast turnaround of bug fixes. Many of them were very
loyal customers after that.&lt;/p&gt;

&lt;p&gt;Using a new feature and develop it with the needs of your customers
instead of your own ideas for a feature makes sure that you develop a
relevant product, not just one that works for you. Customer feedback is
so important in that early phase of product and feature development and
if you as a dev always think about all the code you have to change instead
of looking forward to refining the feature then you are doing things
wrong. Product development is fundamentally different from project based
development. Project based development is a lot about covering your ass
against future law suites. Product development is about trying things
out, making sure you can quickly react to changes in the market, about
saying sorry to your clients only to surprise them a few hours later.&lt;/p&gt;

&lt;h2 id=&quot;how-to-avoid-the-big-system&quot;&gt;How to avoid the big system&lt;/h2&gt;

&lt;p&gt;Developing a new product is an awesome challenge and there are so many
ways to do things right but there are a few traps that I have seen that
hinder projects to scale once they have to. The biggest such trap is the
“one big system” trap. Initially when starting out everything is nice
and pretty. A few well developed libraries glued together with some
logic. Everything well structured, nicely designed and so on. After a
few years of maintaining and developing that code base the number of
external libraries grow, the glue code becomes a full blown code base
in its own right and maintenance starts to become a real issue. A good
measure is always how long it takes a new developer to wrap his or her
head around the code base.&lt;/p&gt;

&lt;p&gt;The larger the system the more side effects there are, the harder it
becomes to add something new as it always impacts the entire system and
there is really not a lot of leeway to try out new things as they always
have to fit in with how things are done currently. This can become more
and more of a hurdle going forward as programming languages and
approaches develop. What looked like a good idea 2 years ago is most
likely not the state of the art anymore today. If you stick to the
monolithic approach then it will become harder and harder to find
developers that are keen to work on your code base as it is dated code
that does stuff in a way that does not seem modern anymore and
eventually the demand for a complete rewrite will come up. At this stage
you are at the best path to build the “big new system” we discussed
before. You will also end up with a good part of your development
bandwidth stuck in building the exciting new thing while the rest has to
maintain the old beast, implement features on the old code base and
motivation and speed to deliver new features will go down.&lt;/p&gt;

&lt;p&gt;If you look around in large companies that are successful since many
years and have a large amount of code then you’ll notice a common
pattern. No big systems but many loosely coupled systems that all do one
thing really well and talk to each other via a defined API. Very famous
for that approach is &lt;a href=&quot;https://www.quora.com/Amazon/Does-Amazon-still-build-all-their-internal-software-around-internal-APIs&quot;&gt;Amazon&lt;/a&gt;, sometime back in 2002 they decided that
everything internally needs to communicate via an API. Preferably via an
API that could be exposed externally. This was the decision that made
AWS possible and brought us the Amazon we as developers know, the
platform that offers all the things you need to build a scalable
product.&lt;/p&gt;

&lt;p&gt;Building your internal infrastructure around internal APIs, maybe a
message bus, something that lets you hide the implementation details of
a feature behind an API that can then be used by other parts of the
system will not only get you in the position that you can at some
stage expose those APIs to 3rd parties but way more important is the
side effect that you can now start using any technology, any approach to
structure your code, any new hip trendy thing your develeopers just wanted
to experiment with and deploy it into production. You can build an
infrastructure that embraces trying things out. You can create a culture
of wanting to play in the front line of new technology and you don’t
need to fear that it breaks your established business processes.&lt;/p&gt;

&lt;p&gt;A service oriented architecture is an easy way to keep your technical
dept low and to make sure your developers like working on your code
base. They stay relevant, they work with the languages they see most
suited for a problem, they are motivated to work on new exciting
solutions for your problems because they can. Because they are not bound
by the constraints of a single large monolithic system that mandates how
things are done.&lt;/p&gt;

&lt;p&gt;Recent developments and trends like Docker and micro services help with
this approach and go exactly in that very direction. It is a way of
loosely coupling complex systems out of simple, easy to understand and
refactor parts.&lt;/p&gt;

&lt;h2 id=&quot;computers-are-awesome-use-them&quot;&gt;Computers are awesome, use them&lt;/h2&gt;

&lt;p&gt;Automation is key to make sure you can scale a business. I have worked
with admin teams that really liked doing things the way we always did
stuff, manually and proper. Truth is if you get a pager alert at 4am you
don’t appreciate that approach and would love to just run a script and
be done with it. Automation of your infrastructure is not only a
blessing for the sysadmins that have pager duty, it is also a really
good way to make sure you don’t need lots of sysadmins. In a properly
automated infrastructure it is surprising how little sysadmin tasks have
to be done on a regular basis. Automating early on is so important that
I would stress that as one of the first things before you even go live.
If you just get traction and loose your one main server you probably
wish that you had all the little config changes, that are now somewhere
in a backup file, just handy to push them to the new server. There is no
excuse not to use configuration management systems. It does not matter
which one you use, just use one that you can learn quickly and use from
the start.&lt;/p&gt;

&lt;h2 id=&quot;opinions-are-just-that&quot;&gt;Opinions are just that&lt;/h2&gt;

&lt;p&gt;I have fought this all my life, opinionated people that tell you why
emacs is so much better than vi and why you have to switch in order to
be productive. These holy wars go from editors via programming languages
to databases and operating systems. In the end, they don’t matter. I
have worked on impressive systems running AS400, VMS, Windows, Linux and
FreeBSD, written in anything from Fortran via Visual Basic and Perl to
Clojure and in the end they all delivered what they were designed for.&lt;/p&gt;

&lt;p&gt;Before you crucify me now, please take a moment and think why your
favourite X is something everyone else should use? How can you judge
someone else’s comfort level, his level of experience, his background,
his opinions on things. All those holy wars only cripple productivity so
why would we want them? All of us like to be productive with the tools
we like most. As a good rule of thumb I work with the approach that if
there are two in a team that can support a certain technology and they
feel comfortable with the responsibility of supporting that technology
then they can deploy it in production.&lt;/p&gt;

&lt;p&gt;Desires, however, must not have a negative impact on the rest of the
company. If the opinion is that we should replace X with Y and it means
we have to re-write 80% of our code base then this is a disruptive
change that means lost productivity for the benefit of using another
technology. As this benefit is paid for by a customer and they really
don’t care what is used under the hood of their product, I would
consider this not as a viable project. If the project, however, takes
one aspect of an existing solution, refactors it to use Y to make it
more robust, then we have a project that may be well worth spending time
on as it increases the service level the client can expect from the
product.&lt;/p&gt;

&lt;p&gt;Desires and strong opinions are something every developer needs to work
with in any team. There are always many ways that lead to a shippable
product but some are more painful than others and some are purely driven
by ego and a strong opinion. Try to detect those strong opinions and
question them wherever you see them.&lt;/p&gt;

&lt;p&gt;Another trait that is very common is perfectionism. I admire nice code
as much as all developers but perfectionism can be in the way of
shipping a perfectly fine feature. As a developer, try to understand
when a feature is good enough, when a feature has just the right ratio
of things that can be improved the next time you come back to this code
base versus being major enough to be shippable. Code that has nothing
left to improve upon is over engineered and belongs in research
projects, not in product companies.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/the-developers-dilemma/&quot;&gt;The developers dilemma&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on July 07, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[os//os impressions]]></title>
  <link rel="alternate" type="text/html" href="http://lnz.me/os-slash-slash-os-impressions/"/>
  <id>http://lnz.me/os-slash-slash-os-impressions</id>
  <updated>2015-04-20 10:44:57 +1200</updated>
  <published>2015-04-20T00:00:00+12:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" />
  <content type="html">
  
    &lt;p&gt;Last week I attended an interesting conference called
&lt;a href=&quot;http://opensourceopensociety.com/&quot;&gt;open source//open society&lt;/a&gt; that
brought together an interesting cross section of geekdom that I have not
seen at a conference before. I had discussions ranging from editor flame
wars via “the open source model” to tiny houses and earthships. The
most interesting in my view was the high diversity of skills in the room
that made for extremely interesting discussions.&lt;/p&gt;

&lt;p&gt;It also helped me spell out and phrase what for me open source really
means and what the essence of the open source movement is in my view so
I wanted to share it and write it down for future reference.&lt;/p&gt;

&lt;h2 id=&quot;open-source&quot;&gt;open source&lt;/h2&gt;

&lt;p&gt;is in my view the process of sharing and a way for others to comment on
it so that I can learn from them and they can learn from me. The sharing
and reviewing and the giving feedback on the thing that has been shared
is the central thing, the &lt;em&gt;what&lt;/em&gt; is in my view only a way to engage over
a topic. Going with this definition also makes it obvious that open
source for me is far from limited to code. It is a general concept that
is applicable to many situations and a general concept of discussion. If
we discuss abstract things we often base most of the discussion on
abstract ideas that are hard to communicate and hard to give feedback
on. Once we have something that shows what we are talking about, it
makes giving constructive feedback so much easier and therefor the
discussion way more topical and useful.&lt;/p&gt;

&lt;h2 id=&quot;giving-feedback&quot;&gt;giving feedback&lt;/h2&gt;

&lt;p&gt;and receiving feedback is a skill that well run open source projects try
to hone. They try to make their community really good at providing
good feedback as it generates a more welcoming environment that more
people like to contribute to. So, if I look at those projects, the
pattern I see is listening, asking questions, trying to understand where
that person is coming from and then give them support in contributing
and helping them to grow personally by empowering them. If a contributer
can express her or his point of view by contributing what they think is
the right way of doing something and then having a discussion about that
contribution the discussion is most likely focussed on that
contribution. If the contribution can’t be made without jumping through
hoops the likelihood of someone new to the project contributing is
dramatically lowered which leads to lower diversity and smaller
relevance of the project.&lt;/p&gt;

&lt;p&gt;Distributed version control really helped us coders to give qualified
feedback on specific pull requests. I would love to carry that idea into
other parts of life to make sure feedback on anything is more about the
actual contribution and not about who I am or what I believe in.&lt;/p&gt;

&lt;p&gt;Feedback on contributions rather than vague concepts and accepting
feedback and giving feedback in a way that it is positive will cut out
many non-topical aspects of discussions that many of us dislike so much.
Discussions held in a way that stop us contributing in environments that
are based on status, heritage and well honed language rather than actual
contributions.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/os-slash-slash-os-impressions/&quot;&gt;os//os impressions&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on April 20, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Does open source contribute to a more open society?]]></title>
  <link rel="alternate" type="text/html" href="https://iwantmyname.com/blog/2015/03/does-open-source-contribute-to-a-more-open-society.html"/>
  <id>http://lnz.me/does-open-source-contribute-to-a-more-open-society</id>
  <updated>2015-04-09 10:24:34 +1200</updated>
  <published>2015-04-09T00:00:00+12:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#iwantmyname" term="iwantmyname" />
  <content type="html">
  
    &lt;p&gt;Linking to a post I wrote for the iwantmyname blog a few days ago in the
leadup for &lt;a href=&quot;http://www.opensourceopensociety.com/&quot;&gt;OS//OS&lt;/a&gt; - a
conference about open source and open society.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/does-open-source-contribute-to-a-more-open-society/&quot;&gt;Does open source contribute to a more open society?&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on April 09, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[a new view]]></title>
  <link rel="alternate" type="text/html" href="http://lnz.me/a-new-view/"/>
  <id>http://lnz.me/a-new-view</id>
  <updated>2015-03-09 20:03:01 +1300</updated>
  <published>2015-03-09T00:00:00+13:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#life" term="life" />
  <content type="html">
  
    &lt;p&gt;We are starting a new experiment in our life, it is called “project
mountain retreat”. The back story to this experiment is that Manu, 
ever since we first were in St Arnaud and looked at Lake Rotoiti, loved
this place and it felt very much at home for me right away. It took us
years to come back to this place but now we plan to stay a bit longer.&lt;/p&gt;

&lt;p&gt;As the Europe experiment showed we really don’t enjoy the city life for
much more than a couple of days, after that we really like the calm and
quiet of more remote places. When we took out the lease at our current
place we knew it would only be for a few months and planned to build a
tiny house and put it on the south island and go between there and
Wellington to have the best of both worlds. Looking for places we found
a cute little mountain retreat that offered all we wanted but was
already built. Not a tiny house, and that plan is really only postponed
a bit, but a little hut in the mountains, just outside of St Arnaud. It
is calm and far away and still close enough to Wellington that we can
enjoy the city life for a couple of days a week.&lt;/p&gt;

&lt;p&gt;I will report here on progress and learnings from this experiment. It feels
like going on an adventure and a bit like getting back some of the things
I started missing, like actual winters and ski fields around the corner,
but still have the sandy beaches of the Able Tasman region on our door step.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/a-new-view/&quot;&gt;a new view&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on March 09, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The chilling effect of tech law]]></title>
  <link rel="alternate" type="text/html" href="http://www.nzherald.co.nz/business/news/article.cfm?c_id=3&objectid=11409067"/>
  <id>http://lnz.me/articles/miserable-state-of-tech-law-in-nz</id>
  <updated>2015-02-28</updated>
  <published>2015-02-28T00:00:00+13:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" />
  <content type="html">
  
    &lt;p&gt;Two years ago I was part of a bunch of people who put in a submission on
the Telecommunications (Interception Capability and Security) Bill. &lt;a href=&quot;http://dave.moskovitz.co.nz/2013/08/13/tics-bill-submission/&quot;&gt;Dave
wrote about it here: http://dave.moskovitz.co.nz/2013/08/13/tics-bill-submission/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Juha Saarinen posted this article on the Herald and it is really not
helping to turn around and say “we told you so”, what we actually need
is politicians to get off their arrogant attitude and actually listen to
the tech community. We are a nice bunch and totally approachable but if
we get pissed off too much we’ll just move our companies into countries
that have more predictable laws and politicians that are less
ill informed than ours. And know what? there may even be a significant
tax advantage in doing so.&lt;/p&gt;

&lt;p&gt;We can, however, keep turning a blind eye on the increasingly warm
summers that dry out our country and hope that dairy is the future.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/miserable-state-of-tech-law-in-nz/&quot;&gt;The chilling effect of tech law&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on February 28, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Burnout and how to see it]]></title>
  <link rel="alternate" type="text/html" href="http://lnz.me/articles/burnout-and-how-to-see-it/"/>
  <id>http://lnz.me/articles/burnout-and-how-to-see-it</id>
  <updated>2015-02-02</updated>
  <published>2015-02-02T00:00:00+13:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#life" term="life" />
  <content type="html">
  
    &lt;p&gt;I read Derek Sivers post &lt;a href=&quot;http://sivers.org/bad&quot;&gt;Getting out of a bad
place&lt;/a&gt; today and it made me clean up my blog,
re-launch it, collect a few old posts I had scattered around and release
a post that I, myself, had only shared privately so far. It is about my
history with work-till-you-drop and my history with a mind that is
driven to continue well past the point where it is productive or
healthy. I hope it is a post that makes you think if you are in a
similar situation or, even more important, helps you realise you are in
a bad place. A friend I shared this post with recently wrote to me a few
months after meeting him and told me that this made him realise that he
was way down that track already without seeing it. He made drastic
changes to his life and is a way happier person now.&lt;/p&gt;

&lt;h2 id=&quot;about-burnout&quot;&gt;About burnout&lt;/h2&gt;

&lt;p&gt;In my live I have worked quite a lot so far. Many would say I have also
achieved a lot but funny enough for me that never felt that way. I had
my first burnout age 30. I hit rock bottom, knew I had to change
something and decided to kill my career and start from scratch. I
thought that at that time I had learned enough to start again, do
something else and just spend my time enjoying live again. Many who
knew me at that time did not notice that I was a wrack, that I had
massive issues with depression and was just focusing on external
problems to not having to deal with myself. It was a pretty dark time
for me even though my career was going well and the company I worked for
was pretty successful.&lt;/p&gt;

&lt;p&gt;I moved on, recovered, bootstrapped my live in a new country, working
for someone else and just enjoyed life. Thing is, it was actually quite
boring so I started working on a little side project. That side project
turned into a company, that company needed money so I started another
company to finance the first and a few years down the road I noticed
that I had fallen into the same trap I was in before. This time I knew a
bit more and maybe saw my situation in a different light. I knew that I
had to change something but I also knew that I had amazing teams to
rely on and the support from my partner who is never tired to look after
me. She already supported me through my first melt down and not
only helped me build our companies but also always looked after me never
mind which state I was in. I know today that thanks to the people around
me I can get back on my feet, do less, focus on myself more and still
contribute to my companies in a meaningful way.&lt;/p&gt;

&lt;p&gt;A quick side story, I was in Scotland recently and we did a bit of
hiking. I have not done any hiking in anger in a long time and we
decided to hike up Ben Nevis, the highest mountain in the UK. It is a 4h
hike up and a 3h hike down over a pretty shitty path with large boulders
and it really is not that dramatic but in my physical condition it was
way too much for me. Now, my body told me about half way up that this is
not going to work but my mind totally did not accept that. I was up
there, it was amazing, after I got up from that big bolder I was lying
on and slept for an hour, then tried to eat some which I nearly vomited
right away - I did not listen to my body. My fear of being inferior and
me being determined to get up there did serious harm to my body.&lt;/p&gt;

&lt;p&gt;Looking back at my downward spiral experiences I see many analogies, I
did not listen to my body and that took its toll. This time round I got
away without depressions, maybe because I know in the meantime how to
deal with them, maybe because I already suffered from massive anxiety
and claustrophobia. It was not a pretty time and I hope that anyone who
goes through a time like this has a strong partner at his side that
gives them the support to pull themselves out of that again. I have that
strong partner at my side and am very lucky that I managed, thanks to
her, to pull myself out again and listen to my body more.&lt;/p&gt;

&lt;p&gt;I hope that I’ll find my balance at some stage, I certainly know the
signs and know how it feels when I am there but hopefully I will not
forget to listen to my body. I can really only highly urge everyone who
works in a fast paced company to sit back every now and then, reflect
and check if what you do is healthy. Pace is not everything, you only
got this one live and the mad rush of fast growing companies is amazing
but you need to know when to change your mode of running it and when to
change your pace. Running a company is a long term thing and it is only
rewarding if you are on that peak and enjoy the view without that
desire to vomit and sleep or to just hope that a helicopter comes around
the corner to pick you up.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/burnout-and-how-to-see-it/&quot;&gt;Burnout and how to see it&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on February 02, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Subdomain rot and the security implications]]></title>
  <link rel="alternate" type="text/html" href="https://iwantmyname.com/blog/2014/10/sub-domain-rot.html"/>
  <id>http://lnz.me/articles/sub-domain-rot</id>
  <updated>2014-10-23</updated>
  <published>2014-10-23T00:00:00+13:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#iwantmyname" term="iwantmyname" />
  <content type="html">
  
    &lt;p&gt;A post I wrote for the iwantmyname blog about sub domains and how not
cleaning them up every now and then can lead to unexpected behaviour.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/sub-domain-rot/&quot;&gt;Subdomain rot and the security implications&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on October 23, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The difference between 4hww and me]]></title>
  <link rel="alternate" type="text/html" href="http://lnz.me/articles/the-difference-between-4hww-and-me/"/>
  <id>http://lnz.me/articles/the-difference-between-4hww-and-me</id>
  <updated>2014-08-21</updated>
  <published>2014-08-21T00:00:00+12:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" />
  <content type="html">
  
    &lt;p&gt;I attended a 4 hour work week meetup in Berlin yesterday and noticed one big
difference between me and many that were there. Tim Ferris, the author or 4
hour work week, starts from the point of view that work is something that is
not fun and in order to “live” you need to work as little as possible so you
can enjoy your life.&lt;/p&gt;

&lt;p&gt;Now, this is where I would argue that I haven’t worked in a long time as
everything I do are things I actually enjoy doing. Even the things I
don’t like as a task I tend to see as things that get me closer to the
things I like and so they don’t seem to bother me at all.&lt;/p&gt;

&lt;p&gt;Living a happy life to me is not sitting at a beach all day, I get bored
after a few hours and really want to get something done after that. I really
enjoy times where I just hang out with people and talk but even that is
time where I learn, where I do something I like that ultimately adds
to my personal development.&lt;/p&gt;

&lt;p&gt;Four hours of work a week seems way too much or too little to me, I
really prefer doing stuff I like without any time restriction.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/the-difference-between-4hww-and-me/&quot;&gt;The difference between 4hww and me&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on August 21, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[On hiring and hierarchy]]></title>
  <link rel="alternate" type="text/html" href="https://iwantmyname.com/blog/2014/05/culture-at-iwmn-part-three.html"/>
  <id>http://lnz.me/articles/culture-at-iwmn-part-three</id>
  <updated>2014-05-07</updated>
  <published>2014-08-19T00:00:00+12:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#iwantmyname" term="iwantmyname" />
  <content type="html">
  
    &lt;p&gt;A post I wrote for the iwantmyname blog about culture and how we hire people&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/culture-at-iwmn-part-three/&quot;&gt;On hiring and hierarchy&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on August 19, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Berlin]]></title>
  <link rel="alternate" type="text/html" href="http://lnz.me/articles/berlin/"/>
  <id>http://lnz.me/articles/berlin</id>
  <updated>2014-08-07</updated>
  <published>2014-08-07T00:00:00+12:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" />
  <content type="html">
  
    &lt;p&gt;Since a while we live in Berlin for a change. It is really interesting
to see how much New Zealand changed me and to see how different things
look to me now, that I have distance to them.&lt;/p&gt;

&lt;p&gt;The most obvious thing to me is that there is this interesting split
between expats that are here to enjoy living in the startup capital of
Europe and the Germans that always find something that is bothering
them, something they can complain about, something that someone needs to
change. The observation for me is that Germans in Germany are happy to
make some else responsible for their current situation whereas those who
come here just try to get stuff done.&lt;/p&gt;

&lt;p&gt;This may be a bigger thought and because of the comparably young age of
New Zealand most Kiwis needed to get stuff done, complaining did not get
you anywhere. Obviously there are awesome people here in Germany that
get stuff done, don’t blame any higher instance for their current
situation and there are Kiwis that complain bitterly about things, it is
more the general mood, the general way of how the majority thinks and
represents itself to me.&lt;/p&gt;

&lt;p&gt;So, summer is awesome and there are plenty of positive people around me,
just most of them speak English … like me.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/berlin/&quot;&gt;Berlin&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on August 07, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The "work-from-anywhere experiment"]]></title>
  <link rel="alternate" type="text/html" href="https://iwantmyname.com/blog/2014/05/culture-at-iwmn-part-two.html"/>
  <id>http://lnz.me/articles/culture-at-iwmn-part-two</id>
  <updated>2014-05-07</updated>
  <published>2014-05-22T00:00:00+12:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#iwantmyname" term="iwantmyname" />
  <content type="html">
  
    &lt;p&gt;A post I wrote for the iwantmyname blog about culture and our work place policy.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/culture-at-iwmn-part-two/&quot;&gt;The "work-from-anywhere experiment"&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on May 22, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The "one salary experiment"]]></title>
  <link rel="alternate" type="text/html" href="https://iwantmyname.com/blog/2014/05/culture-at-iwmn-part-one.html"/>
  <id>http://lnz.me/articles/culture-at-iwmn-part-one</id>
  <updated>2014-05-07</updated>
  <published>2014-05-07T00:00:00+12:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#iwantmyname" term="iwantmyname" />
  <content type="html">
  
    &lt;p&gt;A post I wrote for the iwantmyname blog about culture and how we decide on who gets how much.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/culture-at-iwmn-part-one/&quot;&gt;The "one salary experiment"&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on May 07, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Why ALIAS-type DNS Records Break The Internet]]></title>
  <link rel="alternate" type="text/html" href="https://iwantmyname.com/blog/2014/01/why-alias-type-records-break-the-internet.html"/>
  <id>http://lnz.me/articles/why-alias-type-records-break-the-internet</id>
  <updated>2014-01-07</updated>
  <published>2014-01-07T00:00:00+13:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#iwantmyname" term="iwantmyname" />
  <content type="html">
  
    &lt;p&gt;A post I wrote for the iwantmyname blog about ALIAS DNS records and why they break the internet.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/why-alias-type-records-break-the-internet/&quot;&gt;Why ALIAS-type DNS Records Break The Internet&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on January 07, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[upcoming Startup Weekends]]></title>
  <link rel="alternate" type="text/html" href="http://lnz.me/articles/upcoming-startup-weekends/"/>
  <id>http://lnz.me/articles/upcoming-startup-weekends</id>
  <updated>2013-06-05</updated>
  <published>2013-06-05T00:00:00+12:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#startup" term="startup" />
  <content type="html">
  
    &lt;p&gt;There are two Startup Weekends coming up in Hawkes Bay and Taurange.
Startup Weekends are a perfect opportunity to learn how to transform an
idea to a MVP, a minimal viable product. Startup Weekends are a crash
course in entrepreneurschip over a weekend in a sheltered environment
and with near to no financial implications. The costs, in fact, are
often not even covering the food and drinks provided during the weekend.&lt;/p&gt;

&lt;p&gt;The upcoming startup weekends in the &lt;a href=&quot;http://hawkesbay.startupweekend.org/&quot;&gt;Hawkes Bay&lt;/a&gt; and &lt;a href=&quot;http://tauranga.startupweekend.org/&quot;&gt;Tauranga&lt;/a&gt; are on
the weekend of the 28th of June and following weekend of the 5th of July
respectively. Make sure you show up at one of them if you are in the
region and plan to push your idea to the next stage. We have world class
mentors at both events and we will definitely have a lot of fun and
learn a lot over these two weekends.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/upcoming-startup-weekends/&quot;&gt;upcoming Startup Weekends&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on June 05, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Communication]]></title>
  <link rel="alternate" type="text/html" href="http://lnz.me/articles/communication/"/>
  <id>http://lnz.me/articles/communication</id>
  <updated>2013-05-21</updated>
  <published>2013-05-21T00:00:00+12:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#startup" term="startup" />
  <content type="html">
  
    &lt;p&gt;When starting a company there is a lot of stuff that needs to be looked
at. There are lots of things that need your attention and many things
will not be talked about because there is simply no time for it. This can
very easily lead to a habit of not communicating with everyone in the
team. Another frequent problem is that from your own point of view a lot
of things are very obvious and you just can’t understand how someone in
your team can’t see it.&lt;/p&gt;

&lt;p&gt;If left untreated this will become a big ugly scar and can break
successful teams over time. Communication is a tricky thing, it needs a
lot of attention to detail and needs a lot of time to get right. Every
new addition to your team will change communication and will need new
ways of communication. The one thing that is the most tricky is
understanding and always coming back to the fact that we are all human,
we make errors and it is often hard to talk with someone who you think
is in the wrong.&lt;/p&gt;

&lt;p&gt;I always try to address communication issues by asking myself what can I
do to fix this, what can I do to address a lack of communication. I
always try to be the one initiating the conversation again after
something went wrong or something did not work out the way we planned.
Communication is key, keep it up, talk to each other, always.&lt;/p&gt;

&lt;p&gt;Another important thing is language. Make sure you phrase things in a
positive way, negative feedback often alienates people and drives them
into defensive behaviour, the opposite of what you need to solve a
communication problem. This needs practice as we normally give bad
feedback to people that make errors, rethink this habit and try to give
encouraging feedback that helps them do it better the next time.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/communication/&quot;&gt;Communication&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on May 21, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[How to get advice]]></title>
  <link rel="alternate" type="text/html" href="http://lnz.me/articles/how-to-get-advice/"/>
  <id>http://lnz.me/articles/how-to-get-advice</id>
  <updated>2013-05-20</updated>
  <published>2013-05-20T00:00:00+12:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#startup" term="startup" />
  <content type="html">
  
    &lt;p&gt;A key task for any co-founder is getting advice. Especially if you are
new to something it is key to ask. It is important to understand that
others have more experience in things that you will bang your head
against. Getting advice is key to a successful start and helps you keep
on track, helps you grow and helps you reposition yourself. Advice is a
key ingredient for many of the most successful entrepreneurs and not
getting advice is a silly thing to do.&lt;/p&gt;

&lt;p&gt;So how does one get advice? A lot of young entrepreneurs mistake advice
with a “how-to”. Trust me, there is no how-to on being successful, there
are way too many factors that come into play and if there would be a
how-to we would drown in a flood of successful startups and would need
another word for it.&lt;/p&gt;

&lt;p&gt;I grew up next to a buddhist monastery and many of my fundamental world
views are based on buddhist principles like do no evil, live an
altruistic life and live what you teach. One very fundamental principle
that always stood out for me is that a student teacher relationship is
something that needs to be re-evaluated, constantly. A student should
always ask himself if the teacher is right, if the topic is relevant to
the student and if the teacher is going into the right direction from
the students point of view.&lt;/p&gt;

&lt;p&gt;Taking this principle and applying it to getting advice lead me to
always trying to get to the essence someone advises me on. I try to get
the core principle, the core idea and then evaluate how it fits into my
world view, into my bigger picture. Reevaluating advice and having a
clear idea of your core values and your core idea helps you applying
advice and still staying true to your values. Advice used as a how-to,
blindly followed and executing upon without understanding the underlying
learnings can derail perfectly good ideas and teams. Not because the one
giving advice wants to harm you but because blindly following a recipe
is rarely giving you the insights that you need to apply the recipe in
the right way.&lt;/p&gt;

&lt;p&gt;Always try to understand what the key learning is and how to apply it to
your startup. Advice comes from people, often successful, from their
point of view and from their point of view in their companies. It may be
highly relevant but it is always from their angle, be aware of it and
know how to evaluate its usefulness to your startup.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/how-to-get-advice/&quot;&gt;How to get advice&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on May 20, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[leading by example]]></title>
  <link rel="alternate" type="text/html" href="http://lnz.me/articles/leading-by-example/"/>
  <id>http://lnz.me/articles/leading-by-example</id>
  <updated>2013-05-14</updated>
  <published>2013-05-14T00:00:00+12:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#startup" term="startup" />
  <content type="html">
  
    &lt;p&gt;Leadership is a tricky thing and over the years I have tried different
styles and was exposed to different styles. I have observed many every
successful people and people in high positions that lead big companies.&lt;/p&gt;

&lt;p&gt;I found that most leaders fall into two categories. Leader by example
and leader by position. What I mean with that is people that live and
breath what they demand from their team, people that are respected for
what they know and people that don’t have to hide behind a title to be
accepted. Those leaders were generally accepted in the team they worked
and were normally not questioned or challenged by their peers.&lt;/p&gt;

&lt;p&gt;Leading by position is a style often found in larger companies where
politics is enough to get a position and actual execution is more in the
way than a contributing factor. If the goal is lots of money then this
leading style can be highly efficient. If the goal is a functioning team
and a good work environment then this leading style is toxic. It does
not create a level of trust and you often end up with the typical management
style where &lt;em&gt;resources&lt;/em&gt; get allocated to tasks and leaders spend most of
their time in meetings discussing important things that the team then
has to &lt;em&gt;execute&lt;/em&gt; on.&lt;/p&gt;

&lt;p&gt;If you want to lead by example you are part of and not on top of a team.
Leading by example means that you surround yourself with peers not with
underlings that do your work. I have seen many very successful people
that did exactly that, being part of a team and leading from within not
from the top.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/leading-by-example/&quot;&gt;leading by example&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on May 14, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Intrinsic vs extrinsic motivation]]></title>
  <link rel="alternate" type="text/html" href="http://lnz.me/articles/intrinsic-vs-extrinsic-motivation/"/>
  <id>http://lnz.me/articles/intrinsic-vs-extrinsic-motivation</id>
  <updated>2013-05-13</updated>
  <published>2013-05-13T00:00:00+12:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#startup" term="startup" />
  <content type="html">
  
    &lt;p&gt;I have mentored at Startup Weekend Auckland last weekend and noticed an
interesting pattern. Participants that were at the weekend with the goal
to win the competition were less motivated in the teams they were in if
they thought the team is not doing well. Participants that were at the
weekend primarily to learn something and did not care too much about
winning were highly motivated and performed really well. Teams
consisting exclusively out of participants who wanted to learn were very
receptive to external input and managed to deliver a very good product.
The winning team was formed by participants that wanted to learn, they
were very motivated and executed very well as a team.&lt;/p&gt;

&lt;p&gt;So, how come trying to win is in the way of winning? &lt;/p&gt;

&lt;p&gt;It comes down to intrinsic vs extrinsic motivation. If your motivation
is trying to achieve something real bad and your task involves
non-trivial problems, or highly creative tasks then any focus on the
goal slows you down. If the task is a highly repetitive task then
extrinsic motivation works very well. I had seen this before and
remembered the candle problem outlined here: &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Candle_Problem (Wikipedia: The candle problem)&quot;&gt;Wikipedia: The candle problem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Intrinsic motivation should always be the one that you push in your
startup. Trying to motivate you and your team by extrinsic motivators
will hinder your performance as a team and will be in your way to make
best use of your creativity. Always look for a way to push intrinsic
motivators and your productivity and creativity will rise.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/intrinsic-vs-extrinsic-motivation/&quot;&gt;Intrinsic vs extrinsic motivation&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on May 13, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[How to end a conversation with me]]></title>
  <link rel="alternate" type="text/html" href="http://lnz.me/articles/how-to-end-a-conversation-with-me/"/>
  <id>http://lnz.me/articles/how-to-end-a-conversation-with-me</id>
  <updated>2013-05-08</updated>
  <published>2013-05-08T00:00:00+12:00</published>
  
  <author>
    <name>Lenz Gschwendtner</name>
    <uri>http://lnz.me</uri>
    <email>mail@norbu09.org</email>
  </author>
  <category scheme="http://lnz.me/tags/#post" term="post" /><category scheme="http://lnz.me/tags/#startup" term="startup" />
  <content type="html">
  
    &lt;p&gt;I get quite a few people that ask me for advice on technical co-founders
or how to find a technical person for their startup. The one sentence
that ends a conversation with me needing to urgently attend another
meeting or some other way of getting away in a polite way is the
following:&lt;/p&gt;

&lt;p&gt;“I know how to do idea X; I only need a technical person to build it
for me.”&lt;/p&gt;

&lt;p&gt;This is doomed for failure on many levels and my time is wasted trying
to point out why. If you find yourself in this situation then here are
some things to think about.&lt;/p&gt;

&lt;p&gt;If you want to train for a marathon and never wore running shoes before
you can pay a personal trainer to get you fit but paying him to run for
you will not prepare you for the marathon, never mind how good that PT
is. Building a startup is way more challenging than running a marathon
and thinking that hiring a tech guy to “just build it” is like blaming
the PT for your missing training. If you are not looking for a partner,
for someone to work with and develop something then you are missing the
point of building something.&lt;/p&gt;

&lt;p&gt;The next misconception is that you think you know everything and all
that is missing is the tech. If your attitude from the get go is that
you already know everything then why bother doing it, you will not learn
anything. You will waste a whole lot of time and energy realising that you did
not know everything and that is a very frustrating realisation that will
never lead you to a successful startup. It will make you bitter and give
you the idea that building startups is a horrible thing to do.&lt;/p&gt;

&lt;p&gt;The next thing that will make you very unhappy is the fact that you
“only need a tech guy”. Looking for “only a tech guy” implies that you
know how to manage a tech guy. Look for a co-founder, look for someone
you can trust on a personal level and build the business with that
person. It is critical that the product vision and the technical vision
are well aligned. Even in teams that know each other very well the
product and tech teams will always challenge each other.&lt;/p&gt;

&lt;p&gt;Understand that your idea is only as good as the team that helps you get
there. If you think of them as underlings you will have a hard time
getting them aligned and turnover will be high. If you manage to get a
team together that is passionate about your idea, your turnover will be
low and everyone will give the best to make this idea a success.&lt;/p&gt;

&lt;p&gt;If I referred you here, you’ll know that the meeting I ran away to was
fake and I hope you learned why I did it.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://lnz.me/articles/how-to-end-a-conversation-with-me/&quot;&gt;How to end a conversation with me&lt;/a&gt; was originally published by Lenz Gschwendtner at &lt;a href=&quot;http://lnz.me&quot;&gt;Lenz Gschwendtner&lt;/a&gt; on May 08, 2013.&lt;/p&gt;</content>
</entry>

</feed>
